function(S_generate_vcpkg_triplet OUTPUT_VARIABLE TARGET)
    set(options)
    set(oneValueArgs LINK_TYPE MSVC_RUNTIME_LINKAGE)
    set(multiValueArgs)
    cmake_parse_arguments(PARSE_ARG
            "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    # Detect architecture
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(ARCH "x64")
    else()
        set(ARCH "x86")
    endif()

    # Detect OS
    if(WIN32)
        set(OS "windows")
    elseif(APPLE)
        set(OS "macos")
    elseif(UNIX)
        set(OS "linux")
    else()
        set(OS "unknown")
    endif()

    # Determine linking type
    if(NOT PARSE_ARG_LINK_TYPE)
        message(FATAL_ERROR "LINK_TYPE must be provided (static or dynamic)")
    endif()
    string(TOLOWER "${PARSE_ARG_LINK_TYPE}" LINK_TYPE)

    # Construct triplet
    if(MSVC AND OS STREQUAL "windows")
        if(LINK_TYPE STREQUAL "static")
            if(MSVC_RUNTIME_LINKAGE STREQUAL "/MD" OR MSVC_RUNTIME_LINKAGE STREQUAL "/MDd")
                set(TRIPLET "${ARCH}-${OS}-static-md")
            elseif(MSVC_RUNTIME_LINKAGE STREQUAL "/MT" OR MSVC_RUNTIME_LINKAGE STREQUAL "/MTd")
                set(TRIPLET "${ARCH}-${OS}-static")
            else()
                set(TRIPLET "${ARCH}-${OS}-static")
                message(WARNING "Unknown MSVC Runtime Linkage: ${MSVC_RUNTIME_LINKAGE}\nTriplet generated will be ${TRIPLET}, which is likely to cause linker errors if your MSVC Runtime Linkage is /MD or /MDd while the resulting libraries from ${TRIPLET} use /MT or /MTd.")
            endif()
        elseif(LINK_TYPE STREQUAL "dynamic")
            set(TRIPLET "${ARCH}-${OS}")
        else()
            message(FATAL_ERROR "Invalid LINK_TYPE: ${LINK_TYPE}")
        endif()
    else()
        # Other OSes
        if(LINK_TYPE STREQUAL "dynamic")
            set(TRIPLET "${ARCH}-${OS}-dynamic")
        else()
            set(TRIPLET "${ARCH}-${OS}")
        endif()
    endif()

    set(${OUTPUT_VARIABLE} "${TRIPLET}" PARENT_SCOPE)
endfunction()

# Handle CMAKE_TOOLCHAIN_FILE and output variable
function(S_detect_vcpkg_toolchain OUT_VAR)
    if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)
        # Attempt to automatically detect Vcpkg
        if(DEFINED ENV{VCPKG_ROOT})
            set(vcpkg_toolchain "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
            if(EXISTS "${vcpkg_toolchain}")
                message(STATUS "Auto-detected VCPKG toolchain at: ${vcpkg_toolchain}")
                set(CMAKE_TOOLCHAIN_FILE "${vcpkg_toolchain}" PARENT_SCOPE)
                set(${OUT_VAR} "${vcpkg_toolchain}" PARENT_SCOPE)
            else()
                message(FATAL_ERROR "VCPKG toolchain not found at: ${vcpkg_toolchain}")
            endif()
        else()
            message(FATAL_ERROR "CMAKE_TOOLCHAIN_FILE not provided and VCPKG_ROOT is not set.")
        endif()
    else()
        message(STATUS "Using user-provided CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}")
        set(VCPKG_TOOLCHAIN_FILE_IS_USER_PROVIDED ON PARENT_SCOPE)
        set(${OUT_VAR} "${CMAKE_TOOLCHAIN_FILE}" PARENT_SCOPE)
    endif()
endfunction()